#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('demo:server');
let fs = require('fs');
let webSocket = require('ws');
let http = require('http');
let https = require('https');

/**
 * Create Credentials for https
 */

let credentials = {
  key: fs.readFileSync('sslcert/server.key', 'utf8'),
  cert: fs.readFileSync('sslcert/server.cert', 'utf8')
};

/**
 * Get port from environment and store in Express.
 */

let httpPort = normalizePort(process.env.PORT || '3000');
let httpsPort = normalizePort(process.env.PORT || '3443');
app.set('port', httpPort);
app.set('port', httpsPort);

/**
 * Create HTTP server.
 */

let httpServer = http.createServer(app);

/**
 * Create HTTPS server
 */

let httpsServer = https.createServer(credentials, app);

/**
 * Websocket Configuration
 */

let webSocketServer = new webSocket.Server({ server : httpsServer });

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(httpPort);
httpServer.on('error', onHttpError);
httpServer.on('listening', onHttpListening);
httpsServer.listen(httpsPort);
httpsServer.on('error', onHttpsError);
httpsServer.on('listening', onHttpsListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onHttpError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof httpPort === 'string'
    ? 'Pipe ' + httpPort
    : 'Port ' + httpPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTPS server "error" event.
 */

function onHttpsError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof httpsPort === 'string'
      ? 'Pipe ' + httpsPort
      : 'Port ' + httpsPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onHttpListening() {
  let addr = httpServer.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Event listener for HTTPS server "listening" event.
 */

function onHttpsListening() {
  let addr = httpsServer.address();
  let bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

webSocketServer.on('connection', (socket) => {
  socket.on('message', (message) => {
    console.log(`Message received over WebSocket: ${message}`);
    webSocketServer.clients.forEach((client) => {
      if (client.readyState === webSocket.OPEN) {
        client.send(JSON.stringify('Hi Google'));
      }
    });
  });
  socket.send('Hi');
});

//ToDo make this work
module.exports = webSocketServer;
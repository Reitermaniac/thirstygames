#!/usr/bin/env node

/**
 * Module dependencies.
 */

const ssl = true; // Toggle between https (true) and http (false)
const express = require('express');
const appFunction = require('../app');
const debug = require('debug')('demo:server');
const fs = require('fs');
const webSocket = require('ws');
const http = (ssl) ? require('https') : require('http');

let app = express();

/**
 * Create Credentials for https
 */

const credentials = {
  key: fs.readFileSync('sslcert/client.key', 'utf8'),
  cert: fs.readFileSync('sslcert/client.crt', 'utf8'),
};

/**
 * Create HTTP server.
 */

let httpServer;
if (ssl) {
  httpServer = http.createServer(credentials, app);
} else {
  httpServer = http.createServer(app);
}

/**
 * Websocket Configuration
 */

const webSocketServer = new webSocket.Server({server: httpServer});
app = appFunction(app, webSocketServer);

/**
 * Get port from environment and store in Express.
 */

const httpPort = normalizePort(process.env.PORT || '3000');
app.set('port', httpPort);

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(httpPort);
httpServer.on('error', onHttpError);
httpServer.on('listening', onHttpListening);

/**
 * Normalize a port into a number, string, or false.
 * @param {let} val
 * @return {let} httpPort
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 * @param {let} error
 */
function onHttpError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof httpPort === 'string'
    ? 'Pipe ' + httpPort
    : 'Port ' + httpPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onHttpListening() {
  const addr = httpServer.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
